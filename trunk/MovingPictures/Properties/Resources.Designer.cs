//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaPortal.Plugins.MovingPictures.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MediaPortal.Plugins.MovingPictures.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap accept {
            get {
                object obj = ResourceManager.GetObject("accept", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap approved {
            get {
                object obj = ResourceManager.GetObject("approved", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_cross {
            get {
                object obj = ResourceManager.GetObject("arrow_cross", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_divide {
            get {
                object obj = ResourceManager.GetObject("arrow_divide", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_down {
            get {
                object obj = ResourceManager.GetObject("arrow_down", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_down1 {
            get {
                object obj = ResourceManager.GetObject("arrow_down1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_down2 {
            get {
                object obj = ResourceManager.GetObject("arrow_down2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_join {
            get {
                object obj = ResourceManager.GetObject("arrow_join", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_rotate_clockwise {
            get {
                object obj = ResourceManager.GetObject("arrow_rotate_clockwise", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_switch {
            get {
                object obj = ResourceManager.GetObject("arrow_switch", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap arrow_up {
            get {
                object obj = ResourceManager.GetObject("arrow_up", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap bin_empty {
            get {
                object obj = ResourceManager.GetObject("bin_empty", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap bug {
            get {
                object obj = ResourceManager.GetObject("bug", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap cog {
            get {
                object obj = ResourceManager.GetObject("cog", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap cross {
            get {
                object obj = ResourceManager.GetObject("cross", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap exclamation {
            get {
                object obj = ResourceManager.GetObject("exclamation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap folder_image {
            get {
                object obj = ResourceManager.GetObject("folder_image", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap grey_bug {
            get {
                object obj = ResourceManager.GetObject("grey_bug", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap help {
            get {
                object obj = ResourceManager.GetObject("help", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;Media Sources&lt;/title&gt;
        ///&lt;/head&gt;
        ///&lt;body bgcolor=&quot;FFFFE1&quot;&gt;
        ///    &lt;h1&gt;Media Sources&lt;/h1&gt;
        ///    &lt;h2&gt;Watch Folders&lt;/h2&gt;
        ///    &lt;p&gt; Moving Pictures will automatically import movie content from the watch folders you
        ///        have added in this section. As new movies are added to your watch folders they will
        ///        also be automatically added to Moving Pictures. Likewise, when movies are deleted
        ///        or moved from your watch folders, they will also be removed from Moving Pictures.&lt;/p&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_MediaSources {
            get {
                return ResourceManager.GetString("Help_MediaSources", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap ignored {
            get {
                object obj = ResourceManager.GetObject("ignored", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap information {
            get {
                object obj = ResourceManager.GetObject("information", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;MoviesPluginSettings&gt;
        ///
        ///  &lt;group name=&quot;MediaPortal GUI&quot;&gt;
        ///    &lt;setting id=&quot;default_view&quot; name=&quot;Default View&quot; type=&quot;STRING&quot;&gt;
        ///      &lt;default&gt;list&lt;/default&gt;
        ///      &lt;description&gt;The default view used in the MediaPortal GUI when the plug-in is first opened. Valid options are &quot;list&quot;, &quot;thumbs&quot;, &quot;largethumbs&quot;, and &quot;filmstrip&quot;.&lt;/description&gt;
        ///    &lt;/setting&gt;
        ///
        ///    &lt;setting id=&quot;click_to_details&quot; name=&quot;Click Shows Details&quot; type=&quot;BOOL&quot;&gt;
        ///      &lt;default&gt;true&lt;/default&gt;
        ///      &lt;description&gt;Determines behavior when a mo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitialSettings {
            get {
                return ResourceManager.GetString("InitialSettings", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap list_add {
            get {
                object obj = ResourceManager.GetObject("list_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap list_remove {
            get {
                object obj = ResourceManager.GetObject("list_remove", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap MediaPause {
            get {
                object obj = ResourceManager.GetObject("MediaPause", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap MediaPlay {
            get {
                object obj = ResourceManager.GetObject("MediaPlay", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap MediaStop {
            get {
                object obj = ResourceManager.GetObject("MediaStop", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static byte[] movingpictures_chm {
            get {
                object obj = ResourceManager.GetObject("movingpictures_chm", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static System.Drawing.Bitmap noatunplay {
            get {
                object obj = ResourceManager.GetObject("noatunplay", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap noatunstop {
            get {
                object obj = ResourceManager.GetObject("noatunstop", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap pencil_add {
            get {
                object obj = ResourceManager.GetObject("pencil_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap resultset_next {
            get {
                object obj = ResourceManager.GetObject("resultset_next", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap resultset_previous {
            get {
                object obj = ResourceManager.GetObject("resultset_previous", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap script_add {
            get {
                object obj = ResourceManager.GetObject("script_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;allocine.fr&lt;/name&gt;
        ///    &lt;author&gt;Armand Pondman (armandp) and John Conrad (fforde)&lt;/author&gt;
        ///    &lt;description&gt;This script pulls data from allocine.fr&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_Allocine {
            get {
                return ResourceManager.GetString("Script_Allocine", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap script_delete {
            get {
                object obj = ResourceManager.GetObject("script_delete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;imdb.com&lt;/name&gt;
        ///    &lt;author&gt;John Conrad (fforde), Armand Pondman (armandp)&lt;/author&gt;
        ///    &lt;description&gt;This script pulls data from IMDb.&lt;/description&gt;
        ///    
        ///    &lt;!-- 
        ///    These fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version numbers should change. EVEN FOR 
        ///    MINOR CHANGES, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_IMDb {
            get {
                return ResourceManager.GetString("Script_IMDb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;impawards.com&lt;/name&gt;
        ///    &lt;author&gt;John Conrad (fforde)&lt;/author&gt;
        ///    &lt;description&gt;This script grabs cover-art from impawards.com.&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version numbers should change. EVEN FOR 
        ///    MINOR CHANGES, you sh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_IMPAwards {
            get {
                return ResourceManager.GetString("Script_IMPAwards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;posters.motechnet.com&lt;/name&gt;
        ///    &lt;author&gt;Armand Pondman (armandp)&lt;/author&gt;
        ///    &lt;description&gt;This script grabs cover-art from posters.motechnet.com.&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version numbers should change. EVEN FOR 
        ///    M [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_MoTechPosters {
            get {
                return ResourceManager.GetString("Script_MoTechPosters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;moviemeter.nl&lt;/name&gt;
        ///    &lt;author&gt;Armand Pondman (armandp)&lt;/author&gt;
        ///    &lt;description&gt;This script pulls data from moviemeter.nl&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version numbers should chang [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_MovieMeter {
            get {
                return ResourceManager.GetString("Script_MovieMeter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;mymovies.it&lt;/name&gt;
        ///    &lt;author&gt;Ricciolo&lt;/author&gt;
        ///    &lt;description&gt;test&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new versions of the script the version numbers should change. EVEN FOR 
        ///    MINOR CHANGES, you should change the version number if you are going to
        ///    d [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_MyMoviesItalian {
            get {
                return ResourceManager.GetString("Script_MyMoviesItalian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;ScriptableScraper&gt;
        ///  &lt;details&gt;
        ///    &lt;!-- These details are for display purposes only. --&gt;
        ///    &lt;name&gt;ofdb.de&lt;/name&gt;
        ///    &lt;author&gt;Armand Pondman (armandp)&lt;/author&gt;
        ///    &lt;description&gt;This script pulls data from the OFDb XML gateway at http://blog.n4rf.net/solutions/ofdbgw. (ofdb.de)&lt;/description&gt;
        ///
        ///    &lt;!-- 
        ///    These two fields uniquely identify the script. The ID should never 
        ///    change and should be unique (no other script should use this ID). With
        ///    new ve [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script_OFDb {
            get {
                return ResourceManager.GetString("Script_OFDb", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap television {
            get {
                object obj = ResourceManager.GetObject("television", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap tick {
            get {
                object obj = ResourceManager.GetObject("tick", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap world_add {
            get {
                object obj = ResourceManager.GetObject("world_add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap zoom {
            get {
                object obj = ResourceManager.GetObject("zoom", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
